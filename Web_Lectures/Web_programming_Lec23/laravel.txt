composer create-project laravel/laravel lau-server //this will create the project with its name
php artisan serve --> to run the server

//laravel has its own server, so we do not need to put the files in htdocs => no need to run XAMPP
//you cannot write code in the Route file... even though online they might say that we can but it is a HUGE RED FLAG (so no code in api.php)

//in the api.php we need to communicate with the controllers
//We do not touch controller.php, we create new controller files -> php artisan make:controller TestController
//This is automatically created in the controller folder
//A good practice would be to split my controllers into several folders, ex: one for admin, user etc...
// php artisan make:controller Admin/TestController --> this will create a folder (if does not exist) or appends to a the folder (if exists) Admin the testcontroller...

//Now inside the controller we write the code, not insdie the Route. The route would call this controller from the api.php
//use App\Http\Controllers\TestController;  --> we import test controller to ensure that we are getting the correct file (sometimes we have several files with same name in different locations)
//Route::get("test_api", [TestController::class, "getArticles"]);  --> name of API is test_api, then we have an array and the first parameters takes the name of the file then the name of the method inside ""
//So because of the use we know where the file is

//inside TestController, it extends class Controller
//here we have a function getArticles() that returns what we want...
//function getArticles(){
    return "Hello From Controller";
};

//if we want to pass a parameters such as:
//function getArticles($id){
    return "Hello" . $id;
};
//we can add to the route:
//Route::get("test_api/{id}", [TestController::class, "getArticles"]);
//so now in the URL to test we HAVE to add the id, such as 170.../test_api/4

//if we want a default value then we do not NEED to add an id, such as:
//function getArticles($id = "0"){
    return "Hello" . $id;
};
//we can add to the route:
//Route::get("test_api/{id?}", [TestController::class, "getArticles"]) --> we need to add a ?
//so now in the URL to test we are not forced to add an id to the URL since we have a default value